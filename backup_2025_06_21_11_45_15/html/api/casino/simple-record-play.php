<?php
/**
 * Simplified Casino Record Play API - Focus on Balance Updates
 * This bypasses complex casino participation checks and focuses on core functionality
 */

// CRITICAL FIX: Prevent any HTML output and ensure JSON-only response
ini_set('display_errors', 0); // Never display errors in API
error_reporting(E_ALL); // But still log them

// Start output buffering to catch any accidental output
ob_start();

// Set JSON header immediately
header('Content-Type: application/json');
header('Access-Control-Allow-Origin: *');
header('Access-Control-Allow-Methods: POST, GET, OPTIONS');
header('Access-Control-Allow-Headers: Content-Type');

// Handle preflight requests
if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {
    http_response_code(200);
    ob_end_clean();
    echo json_encode(['status' => 'OK']);
    exit;
}

try {
    // Include core files and catch any output they might generate
    require_once __DIR__ . '/../../core/config.php';
    require_once __DIR__ . '/../../core/session.php';
    require_once __DIR__ . '/../../core/qr_coin_manager.php';
    
    // Clear any output that might have been generated by includes
    ob_clean();
    
} catch (Exception $e) {
    ob_end_clean();
    http_response_code(500);
    echo json_encode([
        'error' => 'System initialization failed',
        'debug' => DEVELOPMENT ? $e->getMessage() : null
    ]);
    exit;
}

// Only accept POST
if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
    ob_end_clean();
    http_response_code(405);
    echo json_encode(['error' => 'Method not allowed']);
    exit;
}

// Check authentication
if (!function_exists('is_logged_in') || !is_logged_in() || !isset($_SESSION['user_id'])) {
    ob_end_clean();
    http_response_code(401);
    echo json_encode([
        'error' => 'Authentication required',
        'redirect' => APP_URL . '/html/login.php'
    ]);
    exit;
}

try {
    $user_id = $_SESSION['user_id'];
    
    // Get JSON input
    $input_raw = file_get_contents('php://input');
    $input = json_decode($input_raw, true);
    
    if (!$input) {
        throw new Exception('Invalid JSON input: ' . json_last_error_msg());
    }
    
    // Validate required fields
    $bet_amount = (int)($input['bet_amount'] ?? 0);
    $win_amount = (int)($input['win_amount'] ?? 0);
    $game_type = $input['game_type'] ?? 'blackjack';
    $business_id = (int)($input['business_id'] ?? 1);
    
    if ($bet_amount <= 0) {
        throw new Exception('Invalid bet amount');
    }
    
    // Start transaction
    $pdo->beginTransaction();
    
    // Lock user's transactions to prevent race conditions
    $stmt = $pdo->prepare("
        SELECT user_id FROM qr_coin_transactions 
        WHERE user_id = ? 
        ORDER BY id DESC 
        LIMIT 1 
        FOR UPDATE
    ");
    $stmt->execute([$user_id]);
    
    // Check current balance
    $current_balance = QRCoinManager::getBalance($user_id);
    if ($current_balance < $bet_amount) {
        throw new Exception('Insufficient balance');
    }
    
    // Deduct bet amount
    $deduct_result = QRCoinManager::spendCoins(
        $user_id,
        $bet_amount,
        'casino_bet',
        "Blackjack bet at business #" . $business_id,
        [
            'business_id' => $business_id,
            'game_type' => $game_type,
            'bet_amount' => $bet_amount
        ],
        $business_id,
        'casino_play'
    );
    
    if (!$deduct_result['success']) {
        throw new Exception('Failed to deduct bet: ' . $deduct_result['error']);
    }
    
    // Add win amount if applicable
    if ($win_amount > 0) {
        $win_result = QRCoinManager::addTransaction(
            $user_id,
            'earning',
            'casino_win',
            $win_amount,
            "Blackjack win at business #" . $business_id,
            [
                'business_id' => $business_id,
                'game_type' => $game_type,
                'bet_amount' => $bet_amount,
                'win_amount' => $win_amount
            ],
            null,
            'casino_play'
        );
        
        if (!$win_result['success']) {
            throw new Exception('Failed to add winnings: ' . $win_result['error']);
        }
    }
    
    // Log the play for analytics (simplified)
    $stmt = $pdo->prepare("
        INSERT INTO casino_plays 
        (user_id, business_id, game_id, game_type, bet_amount, win_amount, played_at)
        VALUES (?, ?, 2, ?, ?, ?, NOW())
    ");
    $stmt->execute([$user_id, $business_id, $game_type, $bet_amount, $win_amount]);
    
    // Commit transaction
    $pdo->commit();
    
    // Get updated balance
    $new_balance = QRCoinManager::getBalance($user_id);
    
    // Check if any transaction results indicate need for resync
    $should_resync = ($deduct_result['should_resync'] ?? false) || 
                     (isset($win_result) && ($win_result['should_resync'] ?? false));
    
    $response = [
        'success' => true,
        'new_balance' => $new_balance,
        'bet_amount' => $bet_amount,
        'win_amount' => $win_amount,
        'balance_change' => $new_balance - $current_balance,
        'should_resync' => $should_resync,
        'message' => 'Game recorded successfully'
    ];
    
    // Clean output buffer and send JSON response
    ob_end_clean();
    echo json_encode($response);
    
} catch (Exception $e) {
    // Rollback on error
    if ($pdo->inTransaction()) {
        $pdo->rollback();
    }
    
    error_log("Simple record-play error: " . $e->getMessage());
    
    // Clean output buffer and send error response
    ob_end_clean();
    http_response_code(400);
    echo json_encode([
        'error' => $e->getMessage(),
        'debug_info' => DEVELOPMENT ? [
            'file' => $e->getFile(),
            'line' => $e->getLine(),
            'user_id' => $user_id ?? null,
            'input' => $input ?? null
        ] : null
    ]);
}
?> 